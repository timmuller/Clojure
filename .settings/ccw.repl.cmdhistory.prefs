#Sun May 20 17:58:56 CEST 2012
cmdhistory=["(/ 3 4)" "(/ 3 4.0)" "(- 465 (/ 3 (* 774 3)))" "(+ 774 (- 465 (/ 3 (* 774 3))))" "(- 465.0(/ 3 (* 774 3)))" "(- 465.0 - 1)" "(- 465.0 1)" "(- 465 (/ (* 774 3) 3))" "(+ (- 465 (/ (* 774 3) 3)) 774)" "(def d1 (java.lang.Date))" "(def d1 (java.lang.Date.))" "(def d1 (java.lang.Date))" "(def d1 (java.util.Date));" "(def d1 (java.util.Date.));" "(def d2 (java.util.Date.));" "\\n(if (\= d1 d2)\\r\\n  \\"de date zijn gelijk\\"\\r\\n  \\"de date zijn ongelijk\\"\\r\\n  )" "(if (\= d1 d2)\\r\\n  \\"de date zijn gelijk\\"\\r\\n  \\"de date zijn ongelijk\\"\\r\\n  )" "(do\\n  (cond\\n    (\= 1 2) \\"een is gelijk aan twee\\"\\n    (< 1 2) \\"een is kleine van twee\\"\\n    \: else  \\"geen van beide\\"\\n    )\\n  )" "(do\\r\\n     (cond\\r\\n       (\= 1 2) \\"een is gelijk aan twee\\"\\r\\n       (< 1 2) \\"een is kleine van twee\\"\\r\\n       \:else  \\"geen van beide\\"\\r\\n       )\\r\\n     )" "(defn hello [name]\\n  \\"hello\\" name\\n  )" "(hello world)" "(defn hello [name]\\r\\n    \\"hello\\"\\r\\n  )" "(hello)" "(hello world)" "(hello \\"world\\")" "(defn hello [name]\\r\\n    \\"hello\\" name\\r\\n  )" "(hello \\"world\\")" "(defn hello [name]\\r\\n    (str \\"hello \\" name)\\r\\n  )" "(hello \\"world\\")" "(max [1 2 5 3 4])" "(3 max [1 2 5 3 4])" "(max max [1 2 5 3 4])" "(max (max [1 2 5 3 4]))" "(\#(- 5 7))" "(\#(- 5 7) 19)" "(\#(- % 7) 19)" "((fn [x] (int (* x x)) 5))" "((fn [x] (int (* x x))) 5)" "(filter (fn [x] (< x 5)) [1 6 5 2 3])" "(filter \#((< % 5)) [1 6 5 2 3])" "\=> (filter \#(< % 5) [1 6 5 2 3])" "(filter \#(< % 5) [1 6 5 2 3])" "((fn [x y & others]) 1 2 3)" "((fn [x y & others] ()) 1 2                   )" "((fn [x y & others]\\r\\n   [x y] (int (* x y))\\r\\n   ) 1 2 3)" "((fn [x y & others]\\r\\n   [x y] (int (* x y))\\n   [x y other] (int (* x y other))\\r\\n   ) 1 2 3)" "((fn\\n  [x] \\"boe\\"\\n  [x y] \\"bah\\"\\n  ) 1)" "((fn [x y & others]\\r\\n  ( if others\\r\\n   \\n) 1 2 3)" "((fn [x y & others]\\r\\n   (if others\\r\\n     (+ x y others)\\r\\n     (* x y)\\r\\n   )\\r\\n) 1 2 3)" "((fn [x y & others]\\r\\n   (if others\\r\\n     (+ x y others)\\r\\n     (* x y)\\r\\n   )\\r\\n) 1 2)" "((fn [x y & others]\\r\\n   (if others\\r\\n     (+ x y others)\\r\\n     (* x y)\\r\\n   )\\r\\n) 1 2 3)" "(defn myfunction\\n  [x y] (* x y)\\n )" "(myfunction 1 2);" "(defn myfunction\\r\\n     [x y] (* x y)\\r\\n     [x y & others] (+ x y)\\r\\n    )" "(defn myfunction [x y & others]\\r\\n\\r\\n    )" "(defn myfunction\\n  ([x y] (* x y))\\r\\n    )" "(defn myfunction\\r\\n     ([x y] (* x y))\\n     ([x y z] (+ x y z))\\r\\n)" "(myfunction 1 1)" "(myfunction 1 1 1)" "(defn myfunction\\r\\n        ([x y] (* x y))\\r\\n        ([x y & z] (+ x y z))\\r\\n   )" "(myfunction 1 1)" "(myfunction 1 2 3)" "(defn myfunction\\r\\n        ([x y] (* x y))\\r\\n        ([x y & z \:as e] (+ x y e))\\r\\n   )" "(defn myfunction\\r\\n           ([x y] (* x y))\\r\\n           ([x y & others] (+ x y others))\\r\\n )" "(defn myfunction\\r\\n           ([x y] (* x y))\\r\\n           ([x y & others] (+ x y 'others))\\r\\n )" "(myfunction 1 2 3)" "(defn myfunction\\r\\n           ([x y] (* x y))\\r\\n           ([x y & others] (+ x y (reduce + others)))\\r\\n )" "(myfunction 1 1);" "(myfunction 1 1 1);" "((fn [x] (x)) [1 2 3])" "((fn [x] x) [1 2 3])" "((fn [x] x[1]) [1 2 3])" "((fn [x] x[1]) [2 3 4])" "((fn [x] nth x 1) [1 2 3])" "((fn [x] nth x 2) [2 3 4])" "((fn [x] count x) [1 2 3])" "((fn [x] (count x)) [1 2 3])" "((fn [x] (nth x 1) [2 3 4]))" "((fn [x] (nth x 1)) [2 3 4])" "((fn [x] (nth x 0)) [2 3 4])" "((fn [x] (nth x (count x))) [2 3 4])" "((fn [x] (nth x 1)(- 1 (count x))) [2 3 4])" "((fn [x] (nth x (- 1 (count x)))) [2 3 4])" "((fn [x] (nth x (- (count x) 1))) [2 3 4])" "((fn [& x] x) [\\"boe\\" \\"bah\\"])" "((fn [& x]\\n  (filter (fn [x] (\= (type x) \\"java.lang.String\\")) x)\\n) [\\"boe\\" \\"bah\\"])" "((fn [& x]\\r\\n  (filter (fn [x] (\= (type x) \\"java.lang.String\\")) x)\\r\\n) \\"boe\\" \\"bah\\")" "type \\"boe\\"" "(type \\"boe\\")" "((fn [& x]\\r\\n  (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n) \\"boe\\" \\"bah\\")" "(defn \\n  [& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n)" "(defn myfunction\\r\\n     [& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n   )" "(myfunction \\"boe\\" \\"boe\\")" "(defn myfunction\\n        [x] x\\r\\n        [& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n      )" "(defn myfunction\\r\\n           [x] (type x)\\r\\n           [& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n         )" "(defn myfunction\\r\\n              ([x] x)\\r\\n              ([& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n            )" "(defn myfunction\\r\\n                 ([& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n               )" "(defn myfunction\\r\\n                 ([x] x)\\r\\n                 ([& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n               )" "(defn myfunction\\r\\n                 ([x] x)\\r\\n                 ([& [x]] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n               )" "(defn myfunction\\r\\n                 ([x] x)\\r\\n                 ([[& x]] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n               )" "(defn myfunction\\r\\n                 ([x] x)\\r\\n                 ([x & x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n               )" "(myfunction \\"boe\\" \\"boe\\")" "(myfunction \\"boe\\" \\"bah\\")" "(defn myfunction\\r\\n                    ([y] y)\\r\\n                    ([& x] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n                  )" "(defn myfunction\\r\\n                       ([y] y)\\r\\n                       ([& [x]] (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x))\\r\\n                     )" "((fn [& x]\\r\\n     (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n   ) \\"boe\\" \\"bah\\")" "\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        \\"nope\\"\\n      )\\r\\n   ) \\"boe\\" \\"bah\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        \\"nope\\"\\r\\n      )\\r\\n   ) \\"boe\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        (type x)\\r\\n      )\\r\\n   ) \\"boe\\" \\"bah\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        (type x)\\r\\n      )\\r\\n   ) \\"boe\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        (type (nht x 0))\\r\\n      )\\r\\n   ) \\"boe\\" \\"bah\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        (type (nth x 0))\\r\\n      )\\r\\n   ) \\"boe\\" \\"bah\\")" "\\r\\n((fn [& x]\\r\\n      (if (> (count x) 1)\\r\\n        (filter (fn [x] (\= (type x) \\"java.lang.String\\") x) x)\\r\\n        (type (nth x 0))\\r\\n      )\\r\\n   ) \\"boe\\")" "(loop 10 (\\"boe\\"))" "(loop [10 i] \\"boe\\")" "(loop [x 10] \\"boe\\")" "(loop [x 10] (str \\"boe\\" x))" "(loop [x 0 10] (str \\"boe\\" x))" "(loop [x (< 0 10)] (str \\"boe\\" x))" "(loop [x 10] (str \\"boe\\" x))" "(loop [(< x 10)] (str \\"boe\\" x))" "(loop [x [0 10]] (str \\"boe\\" x))" "(loop [x 0 10] (str \\"boe\\" x))" "(loop [x 0 y 10] (str \\"boe\\" x))" "(loop [x 0 y 10] (str \\"boe\\" x y))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 10 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (+ acc 1))))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    \\"boe\\"\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 1]\\r\\n\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt)))" "(loop [cnt 1 acc 10]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 100]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\n    \\"bpe\\"\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    (str \\"boe\\")\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 1 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 2]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (* acc cnt))))" "(loop [cnt 5 acc 1]\\r\\n  (if (zero? cnt)\\r\\n    acc\\r\\n    (recur (dec cnt) (+ acc 1))))" "(loop [cnt 5 acc 1]\\r\\n     (if (zero? cnt)\\r\\n       acc\\r\\n       (recur (dec cnt) (+ acc 1))))" "(loop [cnt 5 acc 1]\\r\\n     (if (zero? cnt)\\r\\n       (println \\"boe\\")\\r\\n       (recur (dec cnt) (+ acc 1))))" "defn x 0" "(defn x 0)" "(def x 0)" "x" "(x)" "(loop [inc x cur 10]\\n  (println \\"boe\\")  \\n)" "(loop [inc 1 cur x]\\r\\n     (println \\"boe\\")  \\r\\n   )" "(loop [counter 10 iterator 0]\\n  (if (\= counter iterator)\\n    \\"end\\"\\n    \\"not end\\"\\n  )\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\"not end\\")\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (recur (+ iterator 1))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (recur (- counter 1) (inc iterator))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    ((println \\"boe\\")(recur (+ iterator 1)))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\n      (print \\"boe\\")\\n      (recur (- counter 1)(+ iterator 1))\\n    )\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\r\\n      (print \\"boe\\")\\r\\n      (recur (- counter 1)(+ iterator 1))\\r\\n    )\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\r\\n      (print \\"boe\\")\\r\\n;      (recur (- counter 1)(+ iterator 1))\\r\\n    )\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\r\\n      (print \\"boe\\")\\r\\n      (recur (- counter 1)(+ iterator 1))\\r\\n    )\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\= counter iterator)\\r\\n    \\"end\\"\\r\\n   (recur (- counter 1)(+ iterator 1))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (\!\= counter iterator)\\r\\n    \\"end\\"\\r\\n    (\\r\\n      (print \\"boe\\")\\r\\n      (recur (- counter 1)(+ iterator 1))\\r\\n    )\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (< counter iterator)\\r\\n    \\"end\\"\\r\\n    (recur (- counter 1)(+ iterator 1))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (< counter iterator)\\r\\n    (print \\"end\\")\\r\\n    (recur (- counter 1)(+ iterator 1))\\r\\n  )\\r\\n)" "(loop [counter 10 iterator 0]\\r\\n  (if (< counter iterator)\\r\\n    (println \\"end\\")\\r\\n    (recur (- counter 1)(+ iterator 1))\\r\\n  )\\r\\n)" "(dotimes [i len]\\r\\n      (swap\! a + (nth lst i)))" "(dotimes [i 10]\\r\\n      (swap\! a + (nth lst i)))" "(dotimes [i len] (println \\"boe\\"))" "(dotimes [i 10] (println \\"boe\\"))" "(dotimes [i len] (println i))" "(dotimes [i 10] (println i))" "(defn not-zero? [x]\\n  (filter \#(< % 0) (filter \#(> % 0) x))\\n)" "(filter not-zero? [1 2 0 3 4 0 5 6])" "(defn not-zero? [x]\\r\\n  \\"boe\\"\\r\\n)" "(filter not-zero? [1 2 0 3 4 0 5 6])" "doc" "(doc zero?)" "(doc not-zero?)" "(not-zero? [0, 0])" "(filter not-zero? [1 2 0 3 4 0 5 6])" "(source even?)" "(source zero?)" "(defn not-zero? [x]\\r\\n  (. clojure.lang.Numbers (isZero x))\\r\\n)" "(filter not-zero? [1 2 0 3 4 0 5 6])" "(defn not-zero? [x]\\r\\n  (. clojure.lang.Numbers (isNotZero x))\\r\\n)" "(isZero 0)" "(. clojure.lang.Numbers (isZero 0))" "(. clojure.lang.Numbers (isZero x))" "(. clojure.lang.Numbers (isZero 0))" "(. clojure.lang.Numbers (\!isZero 0))" "(. clojure.lang.Numbers (\= (isZero 0)) false)" "(. clojure.lang.Numbers (isZero 0))" "(\= false (. clojure.lang.Numbers (isZero 0)))" "(\= false (. clojure.lang.Numbers (isZero 1)))" "(defn not-zero? [x]\\r\\n  (\= false (. clojure.lang.Numbers (isZero 1)))\\r\\n)" "(filter not-zero? [1 2 0 3 4 0 5 6])" "(defn not-zero? [x]\\r\\n  (\= false (. clojure.lang.Numbers (isZero x)))\\r\\n)" "(filter not-zero? [1 2 0 3 4 0 5 6])"]
eclipse.preferences.version=1
